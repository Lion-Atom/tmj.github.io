{"remainingRequest":"E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!E:\\vue项目集合\\winning-pts-doc-share-vuepress\\docs\\frontend\\html5.md?vue&type=template&id=3c89b2be&","dependencies":[{"path":"E:\\vue项目集合\\winning-pts-doc-share-vuepress\\docs\\frontend\\html5.md","mtime":1539668432473},{"path":"E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539225403889},{"path":"E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539225403889},{"path":"E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vue项目集合\\winning-pts-doc-share-vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"难度：简单\\\"><a href=\\\"#难度：简单\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 难度：简单</h2> <h2 id=\\\"描述\\\"><a href=\\\"#描述\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 描述</h2> <p>将一个整数中的数字进行颠倒，当颠倒后的整数溢出时，返回 0 (标记为 32 位整数)。</p> <h2 id=\\\"样例：\\\"><a href=\\\"#样例：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 样例：</h2> <p>给定 x = 123，返回 321</p> <p>给定 x = -123，返回 -321</p> <p>给定 x = 1534236469， 返回 0</p> <hr> <h3 id=\\\"这题很简单-自己想一下！\\\"><a href=\\\"#这题很简单-自己想一下！\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-2\\\"><a href=\\\"#这题很简单-自己想一下！-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <h3 id=\\\"这题很简单-自己想一下！-3\\\"><a href=\\\"#这题很简单-自己想一下！-3\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 这题很简单,自己想一下！</h3> <p>给</p> <p>你</p> <p>点</p> <p>时</p> <p>间</p> <p>想</p> <p>一</p> <p>下</p> <hr> <h3 id=\\\"解法：\\\"><a href=\\\"#解法：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 解法：</h3> <ol><li>最优：转字符串 再转数组进行操作</li> <li>看到有人用四则运算+遍历反转整数，会把这个解法放到下面</li></ol> <h3 id=\\\"提示\\\"><a href=\\\"#提示\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 提示:</h3> <p>整数溢出的值为<code>Math.pow(2, 31) - 1</code>和<code>Math.pow(-2, 31) + 1</code>，转为数字：<code>2147483647</code>和<code>-2147483647</code></p> <p>这部分跟位操作符，二进制有关，有兴趣可以去搜下。</p> <h3 id=\\\"code\\\"><a href=\\\"#code\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> code:</h3> <ol><li><p>转数组操作：</p> <pre><code>const reverseInteger = (n) =&gt; {\\n    if (n &lt; 0) {\\n        n = n.toString().split('-')[1]; // 负数提取数字\\n        n = '-' + [...n].reverse().join('');\\n        n = +n; // 转数字\\n    } else {\\n        n = n.toString(); // 转字符\\n        n = +[...n].reverse().join(''); // 转为数组 颠倒数组 再合字符 最后转数字\\n    }\\n    if (n &gt;= Math.pow(2, 31) - 1 || n &lt;= Math.pow(-2, 31) + 1) { // 判断溢出\\n        return 0;\\n    }\\n    return n;\\n}\\n</code></pre></li> <li><p>遍历，一位一位颠倒：</p> <pre><code>const reverseInteger = function (n) {\\n    if (n === 0) return 0;\\n    let res = 0\\n    while (n !== 0) {\\n        // 从个位起一位一位的颠倒\\n        res = res * 10 + n % 10;\\n        n = parseInt(n / 10);  // n除以10， 一位数转化完成 到最后小于1 被转成0 退出循环\\n    }\\n    if (res &gt;= 2147483647 || res &lt;= -2147483647) {\\n        return 0;\\n    }\\n    return res;\\n}\\n</code></pre></li></ol> <h3 id=\\\"转数组操作运行效率也更高点：\\\"><a href=\\\"#转数组操作运行效率也更高点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 转数组操作运行效率也更高点：</h3> <p><img src=\\\"http://ww1.sinaimg.cn/large/005Y4rCogy1fujnet3b8vj318z0kh41p.jpg\\\" alt></p> \"),_vm._ssrNode(\"<h3 id=\\\"github-算法仓库地址\\\">\",\"</h3>\",[_vm._ssrNode(\"<a href=\\\"#github-算法仓库地址\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"https://github.com/OBKoro1/Brush_algorithm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"github 算法仓库地址\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>2018.8.23</p>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}